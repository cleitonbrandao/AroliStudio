services:
    portainer:
        image: portainer/portainer-ce
        restart: always
        command: -H unix:///var/run/docker.sock
        ports:
            - "9500:9000"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./docker/portainer/data:/data
        networks:
            - backend

    # ollama:
    #     #image: ollama/ollama
    #     build:
    #         context: ./docker/ollama
    #     container_name: ollama
    #     ports:
    #         - "11434:11434"
    #     volumes:
    #         - ./docker/ollama:/root/.ollama
    #     restart: unless-stopped
    #     #gpus: all
    #     networks:
    #         - backend

    # openwebui:
    #     image: ghcr.io/open-webui/open-webui:latest
    #     container_name: openwebui
    #     ports:
    #         - "3000:8080"
    #     volumes:
    #         - ./docker/openwebui:/app/backend/data
    #     environment:
    #         - OLLAMA_API_BASE_URL=http://ollama:11434
    #     depends_on:
    #         - ollama
    #     restart: unless-stopped
    #     #gpus: all
    #     networks:
    #         - backend

    nginx:
        restart: always
        build:
            context: ./docker/nginx
            args:
                - CHANGE_SOURCE=${CHANGE_SOURCE}
                - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
                - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
                - http_proxy
                - https_proxy
                - no_proxy
        volumes:
            - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
            - ${NGINX_SSL_PATH}:/etc/nginx/ssl
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
            - "${NGINX_HOST_HTTPS_PORT}:443"
            - "${VARNISH_BACKEND_PORT}:81"
        depends_on:
            - php-fpm
        networks:
            - frontend
            - backend

    php-fpm:
        restart: always
        build:
            context: ./docker/php-fpm
            args:
                - CHANGE_SOURCE=${CHANGE_SOURCE}
                - BASE_IMAGE_TAG_PREFIX=${PHP_FPM_BASE_IMAGE_TAG_PREFIX}
                - LARADOCK_PHP_VERSION=${PHP_VERSION}
                - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
                - INSTALL_BZ2=${PHP_FPM_INSTALL_BZ2}
                - INSTALL_ENCHANT=${PHP_FPM_INSTALL_ENCHANT}
                - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
                - INSTALL_GNUPG=${PHP_FPM_INSTALL_GNUPG}
                - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - INSTALL_PCOV=${PHP_FPM_INSTALL_PCOV}
                - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
                - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
                - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
                - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
                - INSTALL_XSL=${PHP_FPM_INSTALL_XSL}
                - INSTALL_SMB=${PHP_FPM_INSTALL_SMB}
                - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
                - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
                - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
                - INSTALL_ZMQ=${PHP_FPM_INSTALL_ZMQ}
                - INSTALL_GEARMAN=${PHP_FPM_INSTALL_GEARMAN}
                - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
                - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
                - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
                - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
                - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
                - INSTALL_OCI8=${PHP_FPM_INSTALL_OCI8}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
                - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
                - INSTALL_POSTGIS=${PHP_FPM_INSTALL_POSTGIS}
                - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
                - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
                - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
                - INSTALL_PHALCON=${PHP_FPM_INSTALL_PHALCON}
                - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
                - INSTALL_TAINT=${PHP_FPM_INSTALL_TAINT}
                - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
                - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
                - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
                - INSTALL_XLSWRITER=${PHP_FPM_INSTALL_XLSWRITER}
                - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
                - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
                - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
                - INSTALL_CACHETOOL=${PHP_FPM_INSTALL_CACHETOOL}
                - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
                - INSTALL_RDKAFKA=${PHP_FPM_INSTALL_RDKAFKA}
                - INSTALL_GETTEXT=${PHP_FPM_INSTALL_GETTEXT}
                - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
                - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
                - INSTALL_PING=${PHP_FPM_INSTALL_PING}
                - INSTALL_SSHPASS=${PHP_FPM_INSTALL_SSHPASS}
                - INSTALL_MAILPARSE=${PHP_FPM_INSTALL_MAILPARSE}
                - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
                - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
                - INSTALL_FFMPEG=${PHP_FPM_FFMPEG}
                - INSTALL_AUDIOWAVEFORM=${PHP_FPM_AUDIOWAVEFORM}
                - INSTALL_WKHTMLTOPDF=${PHP_FPM_INSTALL_WKHTMLTOPDF}
                - INSTALL_XHPROF=${PHP_FPM_INSTALL_XHPROF}
                - INSTALL_XMLRPC=${PHP_FPM_INSTALL_XMLRPC}
                - INSTALL_PHPDECIMAL=${PHP_FPM_INSTALL_PHPDECIMAL}
                - INSTALL_ZOOKEEPER=${PHP_FPM_INSTALL_ZOOKEEPER}
                - INSTALL_SSDB=${PHP_FPM_INSTALL_SSDB}
                - INSTALL_TRADER=${PHP_FPM_INSTALL_TRADER}
                - DOWNGRADE_OPENSSL_TLS_AND_SECLEVEL=${PHP_DOWNGRADE_OPENSSL_TLS_AND_SECLEVEL}
                - PUID=${PHP_FPM_PUID}
                - PGID=${PHP_FPM_PGID}
                - IMAGEMAGICK_VERSION=${PHP_FPM_IMAGEMAGICK_VERSION}
                - LOCALE=${PHP_FPM_DEFAULT_LOCALE}
                - PHP_FPM_NEW_RELIC=${PHP_FPM_NEW_RELIC}
                - PHP_FPM_NEW_RELIC_KEY=${PHP_FPM_NEW_RELIC_KEY}
                - PHP_FPM_NEW_RELIC_APP_NAME=${PHP_FPM_NEW_RELIC_APP_NAME}
                - INSTALL_DOCKER_CLIENT=${PHP_FPM_INSTALL_DOCKER_CLIENT}
                - http_proxy
                - https_proxy
                - no_proxy
        volumes:
            - ./docker/php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
            - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        expose:
            - "9000"
        extra_hosts:
            - "dockerhost:${DOCKER_HOST_IP}"
            - "host.docker.internal:host-gateway"
        ports:
            - "8000:8000"
        environment:
            - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
            - DOCKER_HOST=tcp://docker-in-docker:2376
            - DOCKER_TLS_VERIFY=1
            - DOCKER_TLS_CERTDIR=/certs
            - DOCKER_CERT_PATH=/certs/client
            - FAKETIME=${PHP_FPM_FAKETIME}
            - TZ=${WORKSPACE_TIMEZONE}
        networks:
            - backend

    php-worker:
        restart: always
        build:
            context: ./docker/php-worker
            args:
                - PROJECT_NAME=${COMPOSE_PROJECT_NAME}
        volumes:
            - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        depends_on:
            - php-fpm
            - mysql
            - redis
        networks:
            - backend

    #php-worker-2:
    #    restart: always
    #    build:
    #        context: ./docker/php-worker
    #        args:
    #            - PROJECT_NAME=${COMPOSE_PROJECT_NAME}
    #    volumes:
    #        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    #    depends_on:
    #        - swoole
    #        - mysql
    #        - redis
    #    networks:
    #        - backend

    #    mariadb:
    #        image: "mariadb:latest"
    #        volumes:
    #            - mariadb:/var/lib/mysql
    #            - ./docker/mariadb/init:/docker-entrypoint-initdb.d
    #        ports:
    #            - "3306:3306"
    #        environment:
    #            - TZ=${WORKSPACE_TIMEZONE}
    #            - MYSQL_DATABASE=${MARIADB_DATABASE}
    #            - MYSQL_USER=${MARIADB_USER}
    #            - MYSQL_PASSWORD=${MARIADB_PASSWORD}
    #            - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    #        networks:
    #            - backend

    mysql:
        image: mysql:latest
        restart: always
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - TZ=${WORKSPACE_TIMEZONE}
        volumes:
            - mysql:/var/lib/mysql
            - ./docker/mysql/init:/docker-entrypoint-initdb.d
        ports:
            - "3306:3306"
        networks:
            - backend

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        restart: always
        environment:
            - PMA_ARBITRARY=1
            - MYSQL_USER=${PMA_USER}
            - MYSQL_PASSWORD=${PMA_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
            - MAX_EXECUTION_TIME=${PMA_MAX_EXECUTION_TIME}
            - MEMORY_LIMIT=${PMA_MEMORY_LIMIT}
            - UPLOAD_LIMIT=${PMA_UPLOAD_LIMIT}
        volumes:
            - phpmyadmin:/var/www/html
        ports:
            - "8080:80"
        depends_on:
            - "${PMA_DB_ENGINE}"
        networks:
            - frontend
            - backend

    redis:
        image: "redis:7.2-rc3-alpine"
        restart: always
        volumes:
            - redis:/data
        command: --requirepass ${REDIS_PASSWORD}
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - backend

    mailpit:
        image: axllent/mailpit:latest
        ports:
            - '8025:8025' # Web UI
            - '1025:1025' # SMTP
        restart: unless-stopped

    vite:
        image: node:18-alpine
        working_dir: /app
        volumes:
            - ./docker/vite:/app
        command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
        ports:
            - "5173:5173"
        networks:
            - backend

    #tinyproxy:
    #    build:
    #        context: ./docker/tinyproxy
    #    ports:
    #        - "3128:8888"           # Porta 3128 externa → interna
    #    environment:
    #        - ALLOWED="0.0.0.0/0"   # Permite qualquer IP (teste)
    #        - PORT="8888"
    #    volumes:
    #        - ./docker/tinyproxy/tinyproxy.conf:/etc/tinyproxy/tinyproxy.conf
    #    restart: unless-stopped
    #    networks:
    #        - backend

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    mysql:
        driver: ${VOLUMES_DRIVER}
    mariadb:
        driver: ${VOLUMES_DRIVER}
    redis:
        driver: ${VOLUMES_DRIVER}
    phpmyadmin:
        driver: ${VOLUMES_DRIVER}
    portainer:
        driver: ${VOLUMES_DRIVER}
    ollama:
        driver: ${VOLUMES_DRIVER}
    openwebui:
        driver: ${VOLUMES_DRIVER}
